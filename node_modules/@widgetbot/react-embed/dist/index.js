import { Client } from '@widgetbot/embed-api';
import * as React from 'react';
import { Embed, Root } from './elements';
import { generateUUID, searchParams } from './util';
let WidgetBot = /** @class */ (() => {
    class WidgetBot extends React.PureComponent {
        constructor() {
            super(...arguments);
            this.state = {
                url: null,
                id: generateUUID()
            };
            this.api = new Client({
                id: this.state.id,
                iframe: null
            });
        }
        static getDerivedStateFromProps(props, state) {
            const url = `${props.shard}/channels/${props.server}${props.channel ? `/${props.channel}` : ''}/${searchParams(Object.assign(Object.assign({}, props.options), { api: state.id }))}`;
            return { url };
        }
        componentDidMount() {
            const { onAPI } = this.props;
            if (onAPI)
                onAPI(this.api);
        }
        render() {
            const { defer, className, style, height, width, focusable } = this.props;
            return (React.createElement("div", { className: className, style: Object.assign(Object.assign({}, Root({ width, height })), style) },
                React.createElement("iframe", { src: defer ? '' : this.state.url, ref: ref => (this.api.iframe = ref), style: Embed, tabIndex: focusable ? null : -1, title: "Discord chat embed" })));
        }
    }
    WidgetBot.defaultProps = {
        server: '299881420891881473',
        shard: 'https://e.widgetbot.io',
        options: {},
        defer: true,
        focusable: true
    };
    return WidgetBot;
})();
export default WidgetBot;
//# sourceMappingURL=index.js.map